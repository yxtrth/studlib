name: 24/7 Backend Keep-Alive Service

on:
  schedule:
    # Run every 10 minutes (GitHub Actions minimum is 5 minutes)
    - cron: '*/10 * * * *'
  workflow_dispatch: # Allow manual triggering
  push:
    branches: [main]
    paths: ['keep-alive-24-7.js', '.github/workflows/keep-alive.yml']

jobs:
  keep-backend-alive:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: 🏓 Ping Backend Health Endpoint
      run: |
        echo "🚀 Pinging Student Library Backend..."
        echo "🎯 Target: https://student-library-backend-o116.onrender.com"
        echo "🕐 Time: $(date)"
        
        # Ping the health endpoint
        response=$(curl -s -w "\n%{http_code}\n%{time_total}" \
          -H "User-Agent: GitHub-Actions-KeepAlive/1.0" \
          -H "Accept: application/json" \
          https://student-library-backend-o116.onrender.com/api/health)
        
        # Extract response parts
        body=$(echo "$response" | head -n -2)
        http_code=$(echo "$response" | tail -n 2 | head -n 1)
        time_total=$(echo "$response" | tail -n 1)
        
        echo "📊 Response Code: $http_code"
        echo "⏱️ Response Time: ${time_total}s"
        
        if [ "$http_code" = "200" ]; then
          echo "✅ Backend is alive and responding!"
          echo "📋 Health Data: $body"
        else
          echo "❌ Backend health check failed with code: $http_code"
          echo "📋 Response: $body"
          exit 1
        fi

  ping-multiple-endpoints:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: keep-backend-alive
    if: always() # Run even if previous job fails
    
    strategy:
      matrix:
        endpoint: ['/api/health', '/api/auth/login', '/api/auth/register']
      fail-fast: false
    
    steps:
    - name: 🔍 Test Endpoint ${{ matrix.endpoint }}
      run: |
        echo "🔗 Testing endpoint: ${{ matrix.endpoint }}"
        
        if [ "${{ matrix.endpoint }}" = "/api/health" ]; then
          # GET request for health
          curl -s -f -w "\nHTTP: %{http_code} | Time: %{time_total}s\n" \
            https://student-library-backend-o116.onrender.com${{ matrix.endpoint }}
        else
          # POST request for auth endpoints (expect 400/401 - means server is alive)
          response_code=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -d '{}' \
            https://student-library-backend-o116.onrender.com${{ matrix.endpoint }})
          
          echo "Response Code: $response_code"
          
          # 400 or 401 means server is alive and responding (validation errors are expected)
          if [ "$response_code" = "400" ] || [ "$response_code" = "401" ] || [ "$response_code" = "200" ]; then
            echo "✅ Endpoint ${{ matrix.endpoint }} is responding (code: $response_code)"
          else
            echo "⚠️ Unexpected response code: $response_code"
          fi
        fi

  log-keep-alive-status:
    runs-on: ubuntu-latest
    needs: [keep-backend-alive, ping-multiple-endpoints]
    if: always()
    
    steps:
    - name: 📈 Log Keep-Alive Activity
      run: |
        echo "📊 KEEP-ALIVE SUMMARY"
        echo "====================="
        echo "🕐 Timestamp: $(date -u)"
        echo "🎯 Target: Student Library Backend"
        echo "🌐 URL: https://student-library-backend-o116.onrender.com"
        echo "🔄 Action: Automated keep-alive ping"
        echo "⚡ Status: Job completed"
        echo ""
        echo "✅ This automated ping helps prevent your Render backend from sleeping!"
        echo "🔁 Next ping scheduled in ~10 minutes"
            echo "✅ Health endpoint responded successfully"
          else
            echo "⚠️ Health endpoint failed, trying root endpoint..."
            if curl -f -s --max-time 30 "$BACKEND_URL/"; then
              echo "✅ Root endpoint responded successfully"
            else
              echo "❌ Both endpoints failed - backend may be down"
              exit 1
            fi
          fi
          
          echo "Ping completed at $(date)"

      - name: Log Status
        run: |
          echo "Keep-alive ping completed"
          echo "Next ping will be in 10 minutes"
